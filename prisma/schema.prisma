// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model experiences {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  link_class             String
  icon_class             String
  icon_name              String
  menu_name              String
  information            String?
  active                 Boolean                  @default(true)
  mode_id                String?                  @db.Uuid
  pod_id                 String?                  @db.Uuid

  created_date           DateTime                 @default(now()) @db.Timestamptz(6)
  update_date            DateTime?                @default(now()) @db.Timestamptz(6)
  deleted_at             DateTime?                @db.Timestamp(6)
  @@index([id], map: "experience_idx")
}

model detail_experience {
  id                              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stroboscopic_light              Int         @db.SmallInt
  audio_surround_sound            Int         @db.SmallInt
  vibro_acoustics                 Int         @db.SmallInt
  led_intensity                   Int         @db.SmallInt
  led_color                       Int         @db.SmallInt
  infra_red_nea_ir                Int         @db.SmallInt
  infra_red_far_ir                Int         @db.SmallInt
  pemf_therapy                    Boolean
  olfactory_engagement            Boolean
  binaural_beats_isochronic_tones Boolean
  direct_neutral_stimulation      Boolean
  duration                        Decimal     @db.Decimal(5, 2)
  experience_id                   String?      @db.Uuid
  song                            String?
  video                           String?
  sound_scape                     Int

  created_at                      DateTime    @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime    @default(now()) @db.Timestamptz(6)
  deleted_at                      DateTime?   @db.Timestamptz(6)
  @@index([id], map: "detail_experience_idx")
}

model experiences_properties {
  id                     String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  circle_line_color      String
  circle_line_width      Float
  circle_fill_color      String
  circle_icon            String
  circle_caption         String
  circle_size            Float
  enable_disable_session Boolean
  order                  Int         @db.SmallInt
  tooltip                String
  icon                   String?
  experience_id          String?      @db.Uuid

  created_at             DateTime    @default(now()) @db.Timestamptz(6)
  updated_at             DateTime    @default(now()) @db.Timestamptz(6)
  deleted_at             DateTime?   @db.Timestamptz(6)
}

model user {
  user_id                       String                          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_names                    String
  username                      String?
  email                         String                          @unique
  password                      String
  is_test_user                  Boolean?                        @default(false)
  reset_token                   String?                         @db.VarChar(255)
  reset_token_expiration        DateTime?                       @db.Timestamp(6)
  deleted_at                    DateTime?                       @db.Timestamp(6)
  otp_verified                  Boolean?                        @default(false)
  created_at                    DateTime                        @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime                        @default(now()) @db.Timestamptz(6)

  rates                         rate[]                          @relation("UserRates")
  terms_and_conditions_accepted terms_and_conditions_accepted[]
  terms_and_conditions_answers  terms_and_conditions_answers[]

  @@index([user_id, username], map: "user_idx")
}

model rate {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  experience_id String?   @db.Uuid
  value         Int?
  updated_date  DateTime? @db.Timestamptz(6)
  created_date  DateTime? @db.Timestamptz(6)
  fk_user_id    String?   @db.Uuid
  deleted_at    DateTime? @db.Timestamp(6)
  user          user?     @relation("UserRates", fields: [fk_user_id], references: [user_id])

  @@index([fk_user_id], map: "fk_user_idx")
  @@index([experience_id], map: "rate_experience_idx")
}

model terms_and_conditions_accepted {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fk_user_id    String    @db.Uuid
  accepted      Boolean   @default(false)
  accepted_date DateTime? @db.Timestamptz(6)
  created_date  DateTime  @default(now()) @db.Timestamptz(6)
  update_date   DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamp(6)
  user          user      @relation(fields: [fk_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_id_foreign_key")

  @@index([id, fk_user_id], map: "terms_and_conditions_accepted_idx")
}

model terms_and_conditions_answers {
  id                             Int                            @id @default(autoincrement()) @db.SmallInt
  fk_user_id                     String                         @db.Uuid
  fk_question_id                 Int                            @db.SmallInt
  answer                         Boolean                        @default(false)
  answer_date                    DateTime                       @default(now()) @db.Timestamptz(6)
  deleted_at                     DateTime?                      @db.Timestamp(6)
  terms_and_conditions_questions terms_and_conditions_questions @relation(fields: [fk_question_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_question")
  user                           user                           @relation(fields: [fk_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
}

model terms_and_conditions_questions {
  id                           Int                            @id @default(autoincrement()) @db.SmallInt
  question                     String
  information                  String?
  active                       Boolean                        @default(true)
  created_date                 DateTime                       @default(now()) @db.Timestamptz(6)
  update_date                  DateTime                       @default(now()) @db.Timestamptz(6)
  deleted_at                   DateTime?                      @db.Timestamp(6)
  terms_and_conditions_answers terms_and_conditions_answers[]

  @@index([id, active], map: "terms_and_conditions_questions_idx")
}

model self_development {
  id                    String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fk_pod_id             String?        @db.Uuid
  self_development_name String?
  description           String?
  icon                  String?

  created_date          DateTime?      @default(now()) @db.Timestamptz(6)
  updated_date          DateTime?      @default(now()) @db.Timestamptz(6)
  deleted_at            DateTime?      @db.Timestamp(6)
}

model self_development_sound {
  id                    String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  self_development_id   String?           @db.Uuid

  sound_code            Int?
  duration              String?
  description           String?
  sound_path            String?
  file_path             String?
  title                 String?
  caption               String?

  created_date          DateTime?        @default(now()) @db.Timestamptz(6)
  updated_date          DateTime?        @default(now()) @db.Timestamptz(6)
  deleted_at            DateTime?        @db.Timestamp(6)
}

model socket_topics {
  id                      String    @id(map: "socket_topic_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  module_name             String?
  event_description       String?
  topic                   String?
  action                  String?
  retain                  Boolean?
  publish_example_value   Json?
  subscribe_example_value Json?
  value_range             String?
  remarks                 String?
  keyword                 String?
  auth_status             Boolean?

  deleted_at              DateTime? @db.Timestamp(6)
  created_date            DateTime  @default(now()) @db.Timestamptz(6)
  update_date             DateTime  @default(now()) @db.Timestamptz(6)

  @@index([id], map: "socket_topic_idx")
}


model pod_topics {
  id                      String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  module_name             String?
  event_description       String?
  topic                   String?
  action                  String?
  retain                  Boolean?
  publish_example_value   Json?
  subscribe_example_value Json?
  value_range             String?
  remarks                 String?
  keyword                 String?

  pod_history             pod_history[]

  deleted_at              DateTime?     @db.Timestamp(6)
  created_date            DateTime      @default(now()) @db.Timestamptz(6)
  update_date             DateTime      @default(now()) @db.Timestamptz(6)

  @@index([id], map: "pod_topics_idx")
}

model pod_history {
  id              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  fk_pod_topic_id String     @db.Uuid

  action          String?
  value           Json?

  pod_topics      pod_topics @relation(fields: [fk_pod_topic_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pod_topic_id")

  created_date    DateTime   @default(now()) @db.Timestamptz(6)
  deleted_at      DateTime?  @db.Timestamp(6)
  update_date     DateTime   @default(now()) @db.Timestamptz(6)

  @@index([id, fk_pod_topic_id], map: "pod_history_idx")
}
